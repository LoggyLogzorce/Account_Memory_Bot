import asyncio
import logging
import os

import psycopg2

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import CallbackQuery, FSInputFile

from config import TOKEN
from keyboard import ReplyMarkup, deleteMarkup, deleteInlineMarkup, all_title_Markup, updateMarkup, confirmation

from db import (data_output_title, entering_data, entering_data_temporary, full_delete_data, data_output, update_data,
                delete_data, delete_temporary, add_polzovatel)
from titulnik import titulnik

connection = psycopg2.connect(user="postgres",
                              password="1234",
                              host="127.0.0.1",
                              port="5432",
                              database='BotMemory')

cursor = connection.cursor()


async def start(message: types.Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –∑–∞–ø–æ–º–Ω—é –¥–∞–Ω–Ω—ã–µ —Ç–≤–æ–∏—Ö —É—á—ë—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.'
                         f'\n–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –∏ –±—É–¥—É –≤—ã–¥–∞–≤–∞—Ç—å —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç —É—á—ë—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π, '
                         f'–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∏—Ö –¥–æ–±–∞–≤–∏—Ç—å.'
                         f'\n\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–∏—Ç—å.', reply_markup=ReplyMarkup)

    add_polzovatel(cursor, message.from_user.username)
    connection.commit()


async def add_await(message: types.Message):
    await message.answer(f'–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞–Ω–Ω—ã–µ —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. \n–ù–∞–ø—Ä–∏–º–µ—Ä: \nMicrosoft Login Password\n\n–∏–ª–∏ \n\n'
                         f'Microsoft \nLogin \nPassword')


async def my_acc(message: types.Message):
    row = data_output(cursor, message.from_user.username)

    if not row:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π', reply_markup=ReplyMarkup)
    else:
        await message.answer('–í–∞—à–∏ –∑–∞–ø–∏—Å–∏ ‚¨áÔ∏è', reply_markup=all_title_Markup(cursor, str(message.from_user.username)))

    connection.commit()


async def delete_acc(message: types.Message):
    row = data_output(cursor, message.from_user.username)

    if not row:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π', reply_markup=ReplyMarkup)
    else:
        await message.answer('–ù–∞—à—ë–ª –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏, —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å?', reply_markup=deleteMarkup)

    connection.commit()


async def one_delete_acc(message: types.Message):
    await message.answer(f'–ö–∞–∫—É—é –∑–∞–ø–∏—Å—å —É–¥–∞–ª–∏—Ç—å?',
                         reply_markup=deleteInlineMarkup(cursor, str(message.from_user.username)))


async def full_delete_acc(message: types.Message):
    row = data_output(cursor, message.from_user.username)

    if row is None:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π', reply_markup=ReplyMarkup)
    else:
        await message.answer(f'–í—ã –¥–µ–∏ÃÜ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏?', reply_markup=confirmation())


async def add_output(message: types.Message, bot: Bot):
    if len(message.text.split()) == 1:
        row = data_output_title(cursor, message.from_user.username, message.text)

        if row is None:
            await message.reply(f'ü§∑‚Äç‚ôÄÔ∏è –ó–∞–ø–∏—Å–∏ —Å –¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.')
        else:
            await message.answer(f'–î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {row[2]}\n\n–õ–æ–≥–∏–Ω: `{row[3]}`\n\n–ü–∞—Ä–æ–ª—å: `{row[4]}`',
                                 parse_mode="MARKDOWN")

    elif len(message.text.split()) == 3:
        title = message.text.split()[0]
        login = message.text.split()[1]
        password = message.text.split()[2]

        update = data_output_title(cursor, message.from_user.username, title)

        if update is None:
            entering_data(cursor, message.from_user.username, title, login, password)
            await message.reply('‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞! \n–ß—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.',
                                reply_markup=ReplyMarkup)

            connection.commit()
        else:
            await message.reply(f'‚ùå –ó–∞–ø–∏—Å—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {title} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n'
                                f'–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å, —Ç–æ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ',
                                reply_markup=updateMarkup())
            delete_temporary(cursor, message.from_user.username)
            entering_data_temporary(cursor, message.from_user.username, title, login, password)

            connection.commit()

    elif len(message.text.split('\n')) == 5:
        await message.reply('–¢–∏—Ç—É–ª—å–Ω–∏–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è', reply_markup=ReplyMarkup)
        title = titulnik(message.text)
        document = FSInputFile(f'{title}')
        await bot.send_document(message.chat.id, document)
        os.remove(f"{title}")

    else:
        await message.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö. \n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')


async def Callback(callback_query: CallbackQuery):
    if callback_query.data == 'updateData':
        update_data(cursor, callback_query.from_user.username)

        await callback_query.message.answer(f'‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', reply_markup=ReplyMarkup)

    elif callback_query.data == 'confirmation_yes':
        full_delete_data(cursor, callback_query.from_user.username)

        await callback_query.message.answer(f'‚úÖ –í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã!', reply_markup=ReplyMarkup)

    elif callback_query.data == 'confirmation_no':
        await callback_query.message.answer(f'–í—Å–µ –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –æ—Å—Ç–∞—é—Ç—Å—è', reply_markup=ReplyMarkup)

    else:
        delete_data(cursor, callback_query.from_user.username, callback_query.data.split()[1])

        await callback_query.message.answer(f'‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞: {callback_query.data.split()[1]}',
                                            reply_markup=ReplyMarkup)

    connection.commit()


async def menu(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=ReplyMarkup)


async def start_titulnik(message: types.Message):
    await message.answer('–î–ª—è —Å–æ–∑–¥–∞–Ω–Ω–∏—è —Ç–∏—Ç—É–ª—å–Ω–∏–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µüòí')
    await message.answer('–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞\n–ì—Ä—É–ø–ø—É\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞\n'
                         '–ù–∞–∑–≤–∞–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π\n\n–î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–µü´°',
                         reply_markup=ReplyMarkup)


async def main():
    logging.basicConfig(level=logging.INFO)

    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    dp.message.register(start, CommandStart())
    dp.message.register(add_await, F.text == '–î–æ–±–∞–≤–∏—Ç—å')
    dp.message.register(my_acc, F.text == '–í—Å–µ –º–æ–∏ –∑–∞–ø–∏—Å–∏')
    dp.message.register(delete_acc, F.text == '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π')
    dp.message.register(one_delete_acc, F.text == '–£–¥–∞–ª–∏—Ç—å –æ–¥–Ω—É')
    dp.message.register(full_delete_acc, F.text == '–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏')
    dp.message.register(menu, F.text == '–ù–∞–∑–∞–¥')

    dp.message.register(start_titulnik, F.text == '–°–æ–∑–¥–∞—Ç—å —Ç–∏—Ç—É–ª—å–Ω–∏–∫')

    dp.message.register(add_output)

    dp.callback_query.register(Callback)

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


asyncio.run(main())
